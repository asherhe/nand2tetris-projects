// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe; // twoToThe[i] is literally 2^i

    /** Initializes the library. */
    function void init() {
      var int powerOfTwo;
      var int i;

      // Fill up twoToThe[i]
      let powerOfTwo = 1;
      let i = 0;

      let twoToThe = Array.new(16);
      while (i < 16) {
        let twoToThe[i] = powerOfTwo;
        let powerOfTwo = powerOfTwo + powerOfTwo; // We can't use the * symbol or it'd be an infinite recursion
        let i = i + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the i-th bit of n */
    function int bit(int n, int i) {
      return n & twoToThe[i]; // Use a bit mask to get the value, since we don't have bit shifting
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX;
      var int j;
      let sum = 0;
      let shiftedX = x; // We shift x by one bit each time, like actual division

      let j = 0;
      while (j < 16) {
        if (bit(y, j) = 1) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX; // Again, we can't multiply by two, so this'll do
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q;

      if (y > x) { return 0; } // Less than zero, no need to worry

      let q = divide(x, y + y); // We can use multiplication now, but this is faster and less memory-intensive than a function call

      if ((x - (q * y + q * y)) < y) { return q + q; }
      else { return 2 * q + 1 }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a > b) {
        return b;
      }
      return a;
    }
}
